import math
import pprint

#data for locations

locationsData = {
    'Gate':{"visited": False, "locationType": ["Utilities"], "neighbours": [("Ticket Counter", 80)]},
    'Ticket Counter':{"visited": False, "locationType": ["Utilities"], "neighbours": [("Bathroom 4", 20), ("The Fall", 50), ("Fight Club", 40), ("Cylon", 100), ("Astroworld", 50)]},
    'XOChella':{"visited": False, "locationType": ["Water", "Adventure"], "neighbours": [("Arcade", 30), ("Los Pollos Hermanos", 40), ("The Heart River", 30), ("Secure The Bag", 20), ("Bathroom 2", 10), ("Krusty Krabs", 30), ("Tilted Towers", 20)]},
    'Vuzuvela':{"visited": False, "locationType": ["Thrill", "Water"], "neighbours": [("The Fall", 40), ("Heaven's Bridge Entrance 1", 40)]},
    'Blinding Lights':{"visited": False, "locationType": ["Thrill"], "neighbours": [("Cylon", 50), ("The Mom", 90), ("Shrek", 10)]},
    'Cylon':{"visited": False, "locationType": ["Thrill"], "neighbours": [("Astroworld", 60), ("The Heart River", 10), ("Screaming Sharky", 40), ("Krusty Krabs", 30)]},
    'Arcade':{"visited": False, "locationType": ["Kids"], "neighbours": [("Finding Jesse", 10)]},
    'Bikini Bottom':{"visited": False, "locationType": ["Water", "Adventure"], "neighbours": [('Finding Jesse', 10), ("Secure The Bag", 20)]},
    'The Fall':{"visited": False, "locationType": ["Thrill"], "neighbours": [("The Mom", 100), ("Heaven's Bridge Entrance 1", 20)]},
    'F2 Circuits':{"visited": False, "locationType": ["Thrill", "Adventure"], "neighbours": [("Screaming Sharky", 50), ("The Heart River", 40)]},
    'Los Pollos Hermanos':{"visited": False, "locationType": ["Utilities"], "neighbours": [("Calling For Duty", 40), ("The Heart River", 40)]},
    'The Heart River':{"visited": False, "locationType": ["Water", "Kids"], "neighbours": [("Bathroom 5", 10), ("Calling For Duty", 40)]},
    'Screaming Sharky':{"visited": False, "locationType": ["Horror"], "neighbours": [("Heisenberg's Math Lab", 30), ("Astroworld", 50)]},
    "Heisenberg's Math Lab":{"visited": False, "locationType": ["Utilities"], "neighbours": [("The Mom", 30)]},
    'The Mom':{"visited": False, "locationType": ["Thrill", "Horror"], "neighbours": [("Ticket Counter", 80)]},
    'Car-O-Sail':{"visited": False, "locationType": ["Kids"], "neighbours": [("Astroworld", 50), ("Krusty Krabs", 50), ("Bathroom 1", 10), ("Fight Club", 30)]},
    'Calling For Duty':{"visited": False, "locationType": ["Adventure"], "neighbours": [("The Palms", 40)]},
    'Shrek':{"visited": False, "locationType": ["Kids"], "neighbours": []},
    'Secure The Bag':{"visited": False, "locationType": ["Adventure", "Horror"], "neighbours": []},
    'Bathroom 1':{"visited": False, "locationType": ["Bathroom"], "neighbours": []},
    'Bathroom 2':{"visited": False, "locationType": ["Bathroom"], "neighbours": []},
    'Bathroom 3':{"visited": False, "locationType": ["Bathroom"], "neighbours": [("Babatunde", 10)]},
    'Bathroom 4':{"visited": False, "locationType": ["Bathroom"], "neighbours": []},
    'Bathroom 5':{"visited": False, "locationType": ["Bathroom"], "neighbours": []},
    'The Palms':{"visited": False, "locationType": ["Utilities"], "neighbours": []},
    'Fight Club':{"visited": False, "locationType": ["Adventure"], "neighbours": []},
    'Krusty Krabs':{"visited": False, "locationType": ["Utilities"], "neighbours": [("Heaven's Bridge Entrance 2", 10)]},
    "Heaven's Bridge Entrance 2":{"visited": False, "locationType": ["Adventure"], "neighbours": [("Heaven's Bridge Entrance 1", 70)]},
    'Astroworld':{"visited": False, "locationType": ["Adventure", "Horror"], "neighbours": [("Babatunde", 10)]},
    'Babatunde':{"visited": False, "locationType": ["Horror"], "neighbours": [("Heaven's Bridge Entrance 1", 10)]},
    "Heaven's Bridge Entrance 1":{"visited": False, "locationType": ["Adventure"], "neighbours": [("The After Hours", 20)]},
    'The After Hours':{"visited": False, "locationType": ["Thrill", "Horror"], "neighbours": []},
    'Finding Jesse':{"visited": False, "locationType": ["Kids", "Adventure"], "neighbours": []},
    'Tilted Towers':{"visited": False, "locationType": ["Thrill", "Adventure"], "neighbours": []},
}

#list of ride types without bathroom and utilities

rideTypes = ["Kids", "Thrill", "Adventure", "Water", "Horror"]

#next two functions for creating graph

#function to add nodes (locations)

def addLocations(G, locationsData):
    for i in locationsData:
        G[i]=[]
    return G

#function to add edges (neighbours)

def addConnections(G, locationsData):
    for key in locationsData:
        for connection in locationsData[key]["neighbours"]: 
            G[key].append((connection[0],connection[1]))
            G[connection[0]].append((key,connection[1]))
    return G

#function to show all unvisited locations for either a specific location type or for all

def showUnvisited(visited, locations):
    lst=[]

    for location in locations:
        if location not in visited and locationsData[location]["locationType"] != ['Utilities'] and locationsData[location]["locationType"] != ['Bathroom']:
            lst.append(location)
    return lst
    
#dijkstra function to show the shortest path from current location to another location

def dijkstraforDesired(G, start, end):
    table, visited = {}, []
    table[start] = [start, 0]

    for key in G:
        if key != start:
            table[key] = ["", math.inf]

    while len(visited) < len(G):
        minval, node = math.inf, ""
        for key, val in table.items():
            if key not in visited and val[1] < minval:
                minval = val[1]
                node = key
        for neighbour in G[node]: 
            cost, thenode = neighbour[1] + minval, neighbour[0]  
            if thenode not in visited and cost < table[thenode][1]:
                table[thenode][0], table[thenode][1] = node, cost
        visited.append(node)

    mynode, path, ans = end, [], ''
    while mynode != start:
        path.append((table[mynode][0],mynode))
        mynode = table[mynode][0]
    for i in path[::-1]:
        if i == path[0]:
            ans += i[0]+" -> "+i[1]
        else:
            ans += i[0]+" -> "
        
    return(ans, table[end][1])

def findnearest(G, list, current, type):

    (min_path, min_cost) = [], math.inf
    for ride in list:
        if ride == current:
            continue

        path, cost = dijkstraforDesired(G, current, ride)
        if cost < min_cost:
            min_path, min_cost = [(ride, path)], cost
        elif cost == min_cost:
            min_path.append((ride, path))
    
    if len(min_path) == 1:
        print("Path:", min_path[0][1])
        return min_path[0][0]
    else:
        print("Multiple Nearest", type, "Found: ", end='')
        rides = []
        for ride in min_path:
            rides.append(ride[0])
        printList(rides, current)
        print()

        while True:
            chosen = input("Choose any one of the following nearest "+type.lower()+": ")
            if chosen in rides:
                print()
                break
            print("Invalid", type+". Try Again.")
            print()
    
        for ride in min_path:
            if ride[0] == chosen:
                print("Path:", ride[1])
                return ride[0]

#function for options 1, 3 and 5 to show all rides of a specific location type or all 

def findall(G, list, type, current):
    if type != 'Utility':
        print(type+'s', "Unvisited: ", end='')
        printList(list, current)
        print()
    while True:
        chosen = input("Choose "+type+": ")
        if chosen in list:
            path = dijkstraforDesired(G,current,chosen)[0]
            print()
            print("Path:", path)
            return chosen
        else:
            print("Invalid", type+". Try Again.")
            print()

#function to find rides of a specific type

def findPreferredRides(visited, current):
    print("Ride Types Available: ", end='')
    printList(rideTypes, current)
    print()
    while True:
        prefer = input("Choose Ride Type: ")
        if prefer in rideTypes:
            preferredRides = showUnvisited(visited, ridesofType[prefer])
            print()
            if len(preferredRides) == 0:
                return
            else:
                return preferredRides
        print("Invalid Ride Type. Try Again.")
        print()

#function to make a dictionary that contains all locations of a specific type

def putRidesofType(rideTypes, locationsData): 
    ridesofType = {'Utilities': [], 'Bathroom': []}
    addLocations(ridesofType, rideTypes)
    for ride in locationsData:
        for type in locationsData[ride]['locationType']:
            ridesofType[type].append(ride)
    return ridesofType

ridesofType = putRidesofType(rideTypes, locationsData)

#function to print a list as a string

def printList(list, current):
    for ride in list:
        if ride == list[-1] and ride != current:
            print(ride)
        else:
            print(ride, end=", ")

#main function

def main():
    #making graph

    G = {}
    G = addLocations(G, locationsData)
    G = addConnections(G, locationsData)
    pp = pprint.PrettyPrinter(indent=1)
    print()

    #empty print functions to space out terminal calls
    
    #start of terminal calls

    print("Welcome To Habib Amusement Park!")
    print()
    print("Press 1 to start tour")                              #makes start location gate
    print("Press 2 to give your current location")              #makes start location another random location  
    
    visited = []                                                #visited rides list
    starting = int(input("Select: "))                           #makes user choose b/w the two choices
    while True:
        if starting == 1:
            current = "Gate"
            break
        elif starting == 2:
            while True:
                print()
                current = print("Locations: ", end = "")        
                locations = []
                for location in locationsData:
                    locations.append(location)
                printList(locations, None)                      #prints all locations to choose their current location from
                print()
                current = input("Choose Location: ")            
                if current not in locationsData:
                    print("Invalid Location. Try Again.")       #gives error if wrong location input given and makes user give location input again
                    print()
                    continue
                else:
                    print()
                    print("New Location: ",current)             #prints current location of user
                    if locationsData[current]["locationType"] != ["Utilities"] and locationsData[current]["locationType"] != ["Bathroom"] and current not in visited:
                        visited.append(current)                 #makes current ride visited
                    print()
                    break
            break
        else:
            print("Invalid choice. Try again.")                 #gives error if wrong choice input given and makes user choose again
            print()               

    while True:
        print()
        print("Visited Rides: ", end='')                        #prints all visited rides, none if no rides visited
        if visited == []:
            print('None')
        printList(visited, None)
        print()
        unvisited = showUnvisited(visited,locationsData)        #stores all unvisited rides in a single list
        if unvisited == []:     
            print("All Rides Visited. Ending Tour")             #ends tour when all rides visited
            print()
            break
        
        #starts giving user options to go to the next location he wants to go in

        print("Press 1 to see all unvisited rides")             
        print("Press 2 to see nearest unvisited ride")
        print("Press 3 to see all preferred unvisited rides")
        print("Press 4 to see nearest preferred unvisited ride")
        print("Press 5 to see all utilities")
        print("Press 6 to see nearest utility")
        print("Press 7 to see nearest bathroom")
        print("Press 8 to stop tour")
        print()
        option = int(input("Choose any of the options given above: "))
        print()

        if option==1:
            current = findall(G, unvisited, 'Ride', current)
        
        elif option==2:
            current = findnearest(G, unvisited, current, "Rides")

        elif option==3:
            preferredRides = findPreferredRides(visited, current)
            if preferredRides == None:
                print("All Preferred Rides Visited.")
            else:
                current = findall(G, preferredRides, 'Preferred Ride', current)

        elif option==4:
            preferredRides = findPreferredRides(visited, current)
            if preferredRides == None:
                print("All preferred rides visited.")
            else:
                check = findnearest(G, preferredRides, current, "Preferred Rides")

        elif option==5:
            utilities = ridesofType['Utilities']
            print("Utilities Available: ", end='')
            printList(utilities, current)
            print()
            current = findall(G, utilities, 'Utility', current)
        
        elif option==6:
            utilities = ridesofType['Utilities']
            current = findnearest(G, utilities, current, "Utilities")
        
        elif option==7:
            bathroom = ridesofType['Bathroom']
            current = findnearest(G, bathroom, current, "Bathroom")
        
        elif option==8:
            break
        
        else:
            print("Invalid choice. Try again.")
            print()
            continue
        print()
        print("New Location: ",current)
        if (locationsData[current]["locationType"] != ["Utilities"] and locationsData[current]["locationType"] != ["Bathroom"]) and current not in visited:
            visited.append(current)

    print("Thanks for coming to Habib Amusement Park. Here is your path to the gate:", dijkstraforDesired(G, current, 'Gate')[0])     
    print("See you next time!")

main()